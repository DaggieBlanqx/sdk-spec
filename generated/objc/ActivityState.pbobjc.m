// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activity_state.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ActivityState.pbobjc.h"
#import "CommonModel.pbobjc.h"
#import "ActivityModel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ActivitySessionState);
GPBObjCClassDeclaration(CustomerActivity);
GPBObjCClassDeclaration(CustomerNumber);
GPBObjCClassDeclaration(GPBTimestamp);

#pragma mark - ActivityStateRoot

@implementation ActivityStateRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ActivityStateRoot_FileDescriptor

static GPBFileDescriptor *ActivityStateRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.elarian.hera.proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ActivitySessionState

@implementation ActivitySessionState

@dynamic hasCustomerNumber, customerNumber;
@dynamic source;
@dynamic sessionId;
@dynamic appId;
@dynamic activitiesArray, activitiesArray_Count;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;

typedef struct ActivitySessionState__storage_ {
  uint32_t _has_storage_[1];
  CustomerNumber *customerNumber;
  NSString *source;
  NSString *sessionId;
  NSString *appId;
  NSMutableArray *activitiesArray;
  GPBTimestamp *createdAt;
  GPBTimestamp *updatedAt;
} ActivitySessionState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ActivitySessionState_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ActivitySessionState__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "source",
        .dataTypeSpecific.clazz = Nil,
        .number = ActivitySessionState_FieldNumber_Source,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ActivitySessionState__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = ActivitySessionState_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ActivitySessionState__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = ActivitySessionState_FieldNumber_AppId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ActivitySessionState__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "activitiesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerActivity),
        .number = ActivitySessionState_FieldNumber_ActivitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ActivitySessionState__storage_, activitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ActivitySessionState_FieldNumber_CreatedAt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ActivitySessionState__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ActivitySessionState_FieldNumber_UpdatedAt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ActivitySessionState__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ActivitySessionState class]
                                     rootClass:[ActivityStateRoot class]
                                          file:ActivityStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActivitySessionState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ActivityState

@implementation ActivityState

@dynamic sessionsArray, sessionsArray_Count;
@dynamic customerNumbersArray, customerNumbersArray_Count;

typedef struct ActivityState__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sessionsArray;
  NSMutableArray *customerNumbersArray;
} ActivityState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ActivitySessionState),
        .number = ActivityState_FieldNumber_SessionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ActivityState__storage_, sessionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerNumbersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ActivityState_FieldNumber_CustomerNumbersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ActivityState__storage_, customerNumbersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ActivityState class]
                                     rootClass:[ActivityStateRoot class]
                                          file:ActivityStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActivityState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
