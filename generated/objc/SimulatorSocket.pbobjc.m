// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simulator_socket.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "SimulatorSocket.pbobjc.h"
#import "CommonModel.pbobjc.h"
#import "MessagingModel.pbobjc.h"
#import "PaymentModel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Cash);
GPBObjCClassDeclaration(CheckoutPaymentSimulatorNotification);
GPBObjCClassDeclaration(CustomerNumber);
GPBObjCClassDeclaration(GPBDuration);
GPBObjCClassDeclaration(GPBStringValue);
GPBObjCClassDeclaration(InboundMessageBody);
GPBObjCClassDeclaration(MakeVoiceCallSimulatorNotification);
GPBObjCClassDeclaration(MessagingChannelNumber);
GPBObjCClassDeclaration(OutboundMessage);
GPBObjCClassDeclaration(PaymentChannelNumber);
GPBObjCClassDeclaration(PaymentPurseCounterParty);
GPBObjCClassDeclaration(PaymentWalletCounterParty);
GPBObjCClassDeclaration(ReceiveMessageSimulatorCommand);
GPBObjCClassDeclaration(ReceivePaymentSimulatorCommand);
GPBObjCClassDeclaration(SendChannelPaymentSimulatorNotification);
GPBObjCClassDeclaration(SendCustomerPaymentSimulatorNotification);
GPBObjCClassDeclaration(SendMessageSimulatorNotification);
GPBObjCClassDeclaration(UpdatePaymentStatusSimulatorCommand);

#pragma mark - SimulatorSocketRoot

@implementation SimulatorSocketRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SimulatorSocketRoot_FileDescriptor

static GPBFileDescriptor *SimulatorSocketRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.elarian.hera.proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SimulatorToServerCommand

@implementation SimulatorToServerCommand

@dynamic entryOneOfCase;
@dynamic receiveMessage;
@dynamic receivePayment;
@dynamic updatePaymentStatus;

typedef struct SimulatorToServerCommand__storage_ {
  uint32_t _has_storage_[2];
  ReceiveMessageSimulatorCommand *receiveMessage;
  ReceivePaymentSimulatorCommand *receivePayment;
  UpdatePaymentStatusSimulatorCommand *updatePaymentStatus;
} SimulatorToServerCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "receiveMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(ReceiveMessageSimulatorCommand),
        .number = SimulatorToServerCommand_FieldNumber_ReceiveMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SimulatorToServerCommand__storage_, receiveMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receivePayment",
        .dataTypeSpecific.clazz = GPBObjCClass(ReceivePaymentSimulatorCommand),
        .number = SimulatorToServerCommand_FieldNumber_ReceivePayment,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SimulatorToServerCommand__storage_, receivePayment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatePaymentStatus",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdatePaymentStatusSimulatorCommand),
        .number = SimulatorToServerCommand_FieldNumber_UpdatePaymentStatus,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SimulatorToServerCommand__storage_, updatePaymentStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SimulatorToServerCommand class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SimulatorToServerCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "entry",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SimulatorToServerCommand_ClearEntryOneOfCase(SimulatorToServerCommand *message) {
  GPBDescriptor *descriptor = [SimulatorToServerCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ReceiveMessageSimulatorCommand

@implementation ReceiveMessageSimulatorCommand

@dynamic customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic partsArray, partsArray_Count;
@dynamic hasSessionId, sessionId;
@dynamic hasCost, cost;
@dynamic hasDuration, duration;

typedef struct ReceiveMessageSimulatorCommand__storage_ {
  uint32_t _has_storage_[1];
  NSString *customerNumber;
  MessagingChannelNumber *channelNumber;
  NSMutableArray *partsArray;
  GPBStringValue *sessionId;
  Cash *cost;
  GPBDuration *duration;
} ReceiveMessageSimulatorCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = ReceiveMessageSimulatorCommand_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReceiveMessageSimulatorCommand__storage_, customerNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = ReceiveMessageSimulatorCommand_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReceiveMessageSimulatorCommand__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "partsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(InboundMessageBody),
        .number = ReceiveMessageSimulatorCommand_FieldNumber_PartsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ReceiveMessageSimulatorCommand__storage_, partsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReceiveMessageSimulatorCommand_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReceiveMessageSimulatorCommand__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cost",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = ReceiveMessageSimulatorCommand_FieldNumber_Cost,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReceiveMessageSimulatorCommand__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = ReceiveMessageSimulatorCommand_FieldNumber_Duration,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReceiveMessageSimulatorCommand__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReceiveMessageSimulatorCommand class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReceiveMessageSimulatorCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReceivePaymentSimulatorCommand

@implementation ReceivePaymentSimulatorCommand

@dynamic transactionId;
@dynamic hasChannelNumber, channelNumber;
@dynamic customerNumber;
@dynamic hasValue, value;
@dynamic status;

typedef struct ReceivePaymentSimulatorCommand__storage_ {
  uint32_t _has_storage_[1];
  PaymentStatus status;
  NSString *transactionId;
  PaymentChannelNumber *channelNumber;
  NSString *customerNumber;
  Cash *value;
} ReceivePaymentSimulatorCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReceivePaymentSimulatorCommand_FieldNumber_TransactionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReceivePaymentSimulatorCommand__storage_, transactionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentChannelNumber),
        .number = ReceivePaymentSimulatorCommand_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReceivePaymentSimulatorCommand__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = ReceivePaymentSimulatorCommand_FieldNumber_CustomerNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReceivePaymentSimulatorCommand__storage_, customerNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = ReceivePaymentSimulatorCommand_FieldNumber_Value,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReceivePaymentSimulatorCommand__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PaymentStatus_EnumDescriptor,
        .number = ReceivePaymentSimulatorCommand_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReceivePaymentSimulatorCommand__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReceivePaymentSimulatorCommand class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReceivePaymentSimulatorCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReceivePaymentSimulatorCommand_Status_RawValue(ReceivePaymentSimulatorCommand *message) {
  GPBDescriptor *descriptor = [ReceivePaymentSimulatorCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReceivePaymentSimulatorCommand_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReceivePaymentSimulatorCommand_Status_RawValue(ReceivePaymentSimulatorCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [ReceivePaymentSimulatorCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReceivePaymentSimulatorCommand_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UpdatePaymentStatusSimulatorCommand

@implementation UpdatePaymentStatusSimulatorCommand

@dynamic transactionId;
@dynamic status;

typedef struct UpdatePaymentStatusSimulatorCommand__storage_ {
  uint32_t _has_storage_[1];
  PaymentStatus status;
  NSString *transactionId;
} UpdatePaymentStatusSimulatorCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdatePaymentStatusSimulatorCommand_FieldNumber_TransactionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdatePaymentStatusSimulatorCommand__storage_, transactionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PaymentStatus_EnumDescriptor,
        .number = UpdatePaymentStatusSimulatorCommand_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdatePaymentStatusSimulatorCommand__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdatePaymentStatusSimulatorCommand class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdatePaymentStatusSimulatorCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UpdatePaymentStatusSimulatorCommand_Status_RawValue(UpdatePaymentStatusSimulatorCommand *message) {
  GPBDescriptor *descriptor = [UpdatePaymentStatusSimulatorCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdatePaymentStatusSimulatorCommand_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUpdatePaymentStatusSimulatorCommand_Status_RawValue(UpdatePaymentStatusSimulatorCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [UpdatePaymentStatusSimulatorCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdatePaymentStatusSimulatorCommand_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SimulatorToServerCommandReply

@implementation SimulatorToServerCommandReply

@dynamic status;
@dynamic description_p;
@dynamic hasMessage, message;

typedef struct SimulatorToServerCommandReply__storage_ {
  uint32_t _has_storage_[1];
  NSString *description_p;
  OutboundMessage *message;
} SimulatorToServerCommandReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = SimulatorToServerCommandReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SimulatorToServerCommandReply_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SimulatorToServerCommandReply__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = GPBObjCClass(OutboundMessage),
        .number = SimulatorToServerCommandReply_FieldNumber_Message,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SimulatorToServerCommandReply__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SimulatorToServerCommandReply class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SimulatorToServerCommandReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ServerToSimulatorNotification

@implementation ServerToSimulatorNotification

@dynamic entryOneOfCase;
@dynamic sendMessage;
@dynamic makeVoiceCall;
@dynamic sendCustomerPayment;
@dynamic sendChannelPayment;
@dynamic checkoutPayment;

typedef struct ServerToSimulatorNotification__storage_ {
  uint32_t _has_storage_[2];
  SendMessageSimulatorNotification *sendMessage;
  MakeVoiceCallSimulatorNotification *makeVoiceCall;
  SendCustomerPaymentSimulatorNotification *sendCustomerPayment;
  SendChannelPaymentSimulatorNotification *sendChannelPayment;
  CheckoutPaymentSimulatorNotification *checkoutPayment;
} ServerToSimulatorNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(SendMessageSimulatorNotification),
        .number = ServerToSimulatorNotification_FieldNumber_SendMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToSimulatorNotification__storage_, sendMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "makeVoiceCall",
        .dataTypeSpecific.clazz = GPBObjCClass(MakeVoiceCallSimulatorNotification),
        .number = ServerToSimulatorNotification_FieldNumber_MakeVoiceCall,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToSimulatorNotification__storage_, makeVoiceCall),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendCustomerPayment",
        .dataTypeSpecific.clazz = GPBObjCClass(SendCustomerPaymentSimulatorNotification),
        .number = ServerToSimulatorNotification_FieldNumber_SendCustomerPayment,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToSimulatorNotification__storage_, sendCustomerPayment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendChannelPayment",
        .dataTypeSpecific.clazz = GPBObjCClass(SendChannelPaymentSimulatorNotification),
        .number = ServerToSimulatorNotification_FieldNumber_SendChannelPayment,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToSimulatorNotification__storage_, sendChannelPayment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "checkoutPayment",
        .dataTypeSpecific.clazz = GPBObjCClass(CheckoutPaymentSimulatorNotification),
        .number = ServerToSimulatorNotification_FieldNumber_CheckoutPayment,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToSimulatorNotification__storage_, checkoutPayment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ServerToSimulatorNotification class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ServerToSimulatorNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "entry",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ServerToSimulatorNotification_ClearEntryOneOfCase(ServerToSimulatorNotification *message) {
  GPBDescriptor *descriptor = [ServerToSimulatorNotification descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ServerToSimulatorNotificationReply

@implementation ServerToSimulatorNotificationReply


typedef struct ServerToSimulatorNotificationReply__storage_ {
  uint32_t _has_storage_[1];
} ServerToSimulatorNotificationReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ServerToSimulatorNotificationReply class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ServerToSimulatorNotificationReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendMessageSimulatorNotification

@implementation SendMessageSimulatorNotification

@dynamic orgId;
@dynamic customerId;
@dynamic messageId;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic hasMessage, message;

typedef struct SendMessageSimulatorNotification__storage_ {
  uint32_t _has_storage_[1];
  NSString *orgId;
  NSString *customerId;
  NSString *messageId;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  OutboundMessage *message;
} SendMessageSimulatorNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendMessageSimulatorNotification_FieldNumber_OrgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageSimulatorNotification__storage_, orgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendMessageSimulatorNotification_FieldNumber_CustomerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessageSimulatorNotification__storage_, customerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendMessageSimulatorNotification_FieldNumber_MessageId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendMessageSimulatorNotification__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = SendMessageSimulatorNotification_FieldNumber_CustomerNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendMessageSimulatorNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = SendMessageSimulatorNotification_FieldNumber_ChannelNumber,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendMessageSimulatorNotification__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = GPBObjCClass(OutboundMessage),
        .number = SendMessageSimulatorNotification_FieldNumber_Message,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SendMessageSimulatorNotification__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageSimulatorNotification class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageSimulatorNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MakeVoiceCallSimulatorNotification

@implementation MakeVoiceCallSimulatorNotification

@dynamic orgId;
@dynamic customerId;
@dynamic sessionId;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;

typedef struct MakeVoiceCallSimulatorNotification__storage_ {
  uint32_t _has_storage_[1];
  NSString *orgId;
  NSString *customerId;
  NSString *sessionId;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
} MakeVoiceCallSimulatorNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgId",
        .dataTypeSpecific.clazz = Nil,
        .number = MakeVoiceCallSimulatorNotification_FieldNumber_OrgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MakeVoiceCallSimulatorNotification__storage_, orgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = MakeVoiceCallSimulatorNotification_FieldNumber_CustomerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MakeVoiceCallSimulatorNotification__storage_, customerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = MakeVoiceCallSimulatorNotification_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MakeVoiceCallSimulatorNotification__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = MakeVoiceCallSimulatorNotification_FieldNumber_CustomerNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MakeVoiceCallSimulatorNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = MakeVoiceCallSimulatorNotification_FieldNumber_ChannelNumber,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MakeVoiceCallSimulatorNotification__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MakeVoiceCallSimulatorNotification class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MakeVoiceCallSimulatorNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendCustomerPaymentSimulatorNotification

@implementation SendCustomerPaymentSimulatorNotification

@dynamic debitPartyOneOfCase;
@dynamic orgId;
@dynamic customerId;
@dynamic appId;
@dynamic wallet;
@dynamic purse;
@dynamic transactionId;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic hasValue, value;

typedef struct SendCustomerPaymentSimulatorNotification__storage_ {
  uint32_t _has_storage_[2];
  NSString *orgId;
  NSString *customerId;
  NSString *appId;
  PaymentWalletCounterParty *wallet;
  PaymentPurseCounterParty *purse;
  NSString *transactionId;
  CustomerNumber *customerNumber;
  PaymentChannelNumber *channelNumber;
  Cash *value;
} SendCustomerPaymentSimulatorNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendCustomerPaymentSimulatorNotification_FieldNumber_OrgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendCustomerPaymentSimulatorNotification__storage_, orgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendCustomerPaymentSimulatorNotification_FieldNumber_CustomerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendCustomerPaymentSimulatorNotification__storage_, customerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendCustomerPaymentSimulatorNotification_FieldNumber_AppId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendCustomerPaymentSimulatorNotification__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wallet",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentWalletCounterParty),
        .number = SendCustomerPaymentSimulatorNotification_FieldNumber_Wallet,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SendCustomerPaymentSimulatorNotification__storage_, wallet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "purse",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentPurseCounterParty),
        .number = SendCustomerPaymentSimulatorNotification_FieldNumber_Purse,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SendCustomerPaymentSimulatorNotification__storage_, purse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transactionId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendCustomerPaymentSimulatorNotification_FieldNumber_TransactionId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendCustomerPaymentSimulatorNotification__storage_, transactionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = SendCustomerPaymentSimulatorNotification_FieldNumber_CustomerNumber,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendCustomerPaymentSimulatorNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentChannelNumber),
        .number = SendCustomerPaymentSimulatorNotification_FieldNumber_ChannelNumber,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SendCustomerPaymentSimulatorNotification__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = SendCustomerPaymentSimulatorNotification_FieldNumber_Value,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SendCustomerPaymentSimulatorNotification__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendCustomerPaymentSimulatorNotification class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendCustomerPaymentSimulatorNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "debitParty",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SendCustomerPaymentSimulatorNotification_ClearDebitPartyOneOfCase(SendCustomerPaymentSimulatorNotification *message) {
  GPBDescriptor *descriptor = [SendCustomerPaymentSimulatorNotification descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SendChannelPaymentSimulatorNotification

@implementation SendChannelPaymentSimulatorNotification

@dynamic debitPartyOneOfCase;
@dynamic orgId;
@dynamic appId;
@dynamic wallet;
@dynamic purse;
@dynamic transactionId;
@dynamic channel;
@dynamic source;
@dynamic destination;
@dynamic hasAccount, account;
@dynamic hasValue, value;

typedef struct SendChannelPaymentSimulatorNotification__storage_ {
  uint32_t _has_storage_[2];
  PaymentChannel channel;
  NSString *orgId;
  NSString *appId;
  PaymentWalletCounterParty *wallet;
  PaymentPurseCounterParty *purse;
  NSString *transactionId;
  NSString *source;
  NSString *destination;
  GPBStringValue *account;
  Cash *value;
} SendChannelPaymentSimulatorNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendChannelPaymentSimulatorNotification_FieldNumber_OrgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendChannelPaymentSimulatorNotification__storage_, orgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendChannelPaymentSimulatorNotification_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendChannelPaymentSimulatorNotification__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wallet",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentWalletCounterParty),
        .number = SendChannelPaymentSimulatorNotification_FieldNumber_Wallet,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SendChannelPaymentSimulatorNotification__storage_, wallet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "purse",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentPurseCounterParty),
        .number = SendChannelPaymentSimulatorNotification_FieldNumber_Purse,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SendChannelPaymentSimulatorNotification__storage_, purse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transactionId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendChannelPaymentSimulatorNotification_FieldNumber_TransactionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendChannelPaymentSimulatorNotification__storage_, transactionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.enumDescFunc = PaymentChannel_EnumDescriptor,
        .number = SendChannelPaymentSimulatorNotification_FieldNumber_Channel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendChannelPaymentSimulatorNotification__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "source",
        .dataTypeSpecific.clazz = Nil,
        .number = SendChannelPaymentSimulatorNotification_FieldNumber_Source,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendChannelPaymentSimulatorNotification__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "destination",
        .dataTypeSpecific.clazz = Nil,
        .number = SendChannelPaymentSimulatorNotification_FieldNumber_Destination,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SendChannelPaymentSimulatorNotification__storage_, destination),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "account",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = SendChannelPaymentSimulatorNotification_FieldNumber_Account,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SendChannelPaymentSimulatorNotification__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = SendChannelPaymentSimulatorNotification_FieldNumber_Value,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SendChannelPaymentSimulatorNotification__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendChannelPaymentSimulatorNotification class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendChannelPaymentSimulatorNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "debitParty",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SendChannelPaymentSimulatorNotification_Channel_RawValue(SendChannelPaymentSimulatorNotification *message) {
  GPBDescriptor *descriptor = [SendChannelPaymentSimulatorNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendChannelPaymentSimulatorNotification_FieldNumber_Channel];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSendChannelPaymentSimulatorNotification_Channel_RawValue(SendChannelPaymentSimulatorNotification *message, int32_t value) {
  GPBDescriptor *descriptor = [SendChannelPaymentSimulatorNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendChannelPaymentSimulatorNotification_FieldNumber_Channel];
  GPBSetMessageRawEnumField(message, field, value);
}

void SendChannelPaymentSimulatorNotification_ClearDebitPartyOneOfCase(SendChannelPaymentSimulatorNotification *message) {
  GPBDescriptor *descriptor = [SendChannelPaymentSimulatorNotification descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - CheckoutPaymentSimulatorNotification

@implementation CheckoutPaymentSimulatorNotification

@dynamic creditPartyOneOfCase;
@dynamic orgId;
@dynamic customerId;
@dynamic appId;
@dynamic wallet;
@dynamic purse;
@dynamic transactionId;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic hasValue, value;

typedef struct CheckoutPaymentSimulatorNotification__storage_ {
  uint32_t _has_storage_[2];
  NSString *orgId;
  NSString *customerId;
  NSString *appId;
  PaymentWalletCounterParty *wallet;
  PaymentPurseCounterParty *purse;
  NSString *transactionId;
  CustomerNumber *customerNumber;
  PaymentChannelNumber *channelNumber;
  Cash *value;
} CheckoutPaymentSimulatorNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgId",
        .dataTypeSpecific.clazz = Nil,
        .number = CheckoutPaymentSimulatorNotification_FieldNumber_OrgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckoutPaymentSimulatorNotification__storage_, orgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = CheckoutPaymentSimulatorNotification_FieldNumber_CustomerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CheckoutPaymentSimulatorNotification__storage_, customerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = CheckoutPaymentSimulatorNotification_FieldNumber_AppId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CheckoutPaymentSimulatorNotification__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wallet",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentWalletCounterParty),
        .number = CheckoutPaymentSimulatorNotification_FieldNumber_Wallet,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(CheckoutPaymentSimulatorNotification__storage_, wallet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "purse",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentPurseCounterParty),
        .number = CheckoutPaymentSimulatorNotification_FieldNumber_Purse,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(CheckoutPaymentSimulatorNotification__storage_, purse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transactionId",
        .dataTypeSpecific.clazz = Nil,
        .number = CheckoutPaymentSimulatorNotification_FieldNumber_TransactionId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CheckoutPaymentSimulatorNotification__storage_, transactionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = CheckoutPaymentSimulatorNotification_FieldNumber_CustomerNumber,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CheckoutPaymentSimulatorNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentChannelNumber),
        .number = CheckoutPaymentSimulatorNotification_FieldNumber_ChannelNumber,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CheckoutPaymentSimulatorNotification__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = CheckoutPaymentSimulatorNotification_FieldNumber_Value,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CheckoutPaymentSimulatorNotification__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckoutPaymentSimulatorNotification class]
                                     rootClass:[SimulatorSocketRoot class]
                                          file:SimulatorSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckoutPaymentSimulatorNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "creditParty",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void CheckoutPaymentSimulatorNotification_ClearCreditPartyOneOfCase(CheckoutPaymentSimulatorNotification *message) {
  GPBDescriptor *descriptor = [CheckoutPaymentSimulatorNotification descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
