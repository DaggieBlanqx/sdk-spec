// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payment_state.proto

#include "payment_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomerNumber_common_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payment_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PaymentBalance_payment_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payment_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentChannelNumber_payment_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payment_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PaymentState_WalletsEntry_DoNotUse_payment_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payment_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PaymentTransaction_payment_5fmodel_2eproto;
namespace com {
namespace elarian {
namespace hera {
namespace proto {
class PaymentState_WalletsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentState_WalletsEntry_DoNotUse> _instance;
} _PaymentState_WalletsEntry_DoNotUse_default_instance_;
class PaymentStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentState> _instance;
} _PaymentState_default_instance_;
}  // namespace proto
}  // namespace hera
}  // namespace elarian
}  // namespace com
static void InitDefaultsscc_info_PaymentState_payment_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_PaymentState_default_instance_;
    new (ptr) ::com::elarian::hera::proto::PaymentState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PaymentState_payment_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PaymentState_payment_5fstate_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_PaymentChannelNumber_payment_5fmodel_2eproto.base,
      &scc_info_PaymentTransaction_payment_5fmodel_2eproto.base,
      &scc_info_PaymentState_WalletsEntry_DoNotUse_payment_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_PaymentState_WalletsEntry_DoNotUse_payment_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_PaymentState_WalletsEntry_DoNotUse_default_instance_;
    new (ptr) ::com::elarian::hera::proto::PaymentState_WalletsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PaymentState_WalletsEntry_DoNotUse_payment_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PaymentState_WalletsEntry_DoNotUse_payment_5fstate_2eproto}, {
      &scc_info_PaymentBalance_payment_5fmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_payment_5fstate_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_payment_5fstate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_payment_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_payment_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentState_WalletsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentState_WalletsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentState_WalletsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentState_WalletsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentState, customer_numbers_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentState, channel_numbers_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentState, transaction_log_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentState, pending_transactions_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentState, wallets_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::com::elarian::hera::proto::PaymentState_WalletsEntry_DoNotUse)},
  { 9, -1, sizeof(::com::elarian::hera::proto::PaymentState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_PaymentState_WalletsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_PaymentState_default_instance_),
};

const char descriptor_table_protodef_payment_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023payment_state.proto\022\026com.elarian.hera."
  "proto\032\022common_model.proto\032\023payment_model"
  ".proto\"\302\003\n\014PaymentState\022@\n\020customer_numb"
  "ers\030\001 \003(\0132&.com.elarian.hera.proto.Custo"
  "merNumber\022E\n\017channel_numbers\030\002 \003(\0132,.com"
  ".elarian.hera.proto.PaymentChannelNumber"
  "\022C\n\017transaction_log\030\003 \003(\0132*.com.elarian."
  "hera.proto.PaymentTransaction\022H\n\024pending"
  "_transactions\030\004 \003(\0132*.com.elarian.hera.p"
  "roto.PaymentTransaction\022B\n\007wallets\030\005 \003(\013"
  "21.com.elarian.hera.proto.PaymentState.W"
  "alletsEntry\032V\n\014WalletsEntry\022\013\n\003key\030\001 \001(\t"
  "\0225\n\005value\030\002 \001(\0132&.com.elarian.hera.proto"
  ".PaymentBalance:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_payment_5fstate_2eproto_deps[2] = {
  &::descriptor_table_common_5fmodel_2eproto,
  &::descriptor_table_payment_5fmodel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_payment_5fstate_2eproto_sccs[2] = {
  &scc_info_PaymentState_payment_5fstate_2eproto.base,
  &scc_info_PaymentState_WalletsEntry_DoNotUse_payment_5fstate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_payment_5fstate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payment_5fstate_2eproto = {
  false, false, descriptor_table_protodef_payment_5fstate_2eproto, "payment_state.proto", 547,
  &descriptor_table_payment_5fstate_2eproto_once, descriptor_table_payment_5fstate_2eproto_sccs, descriptor_table_payment_5fstate_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_payment_5fstate_2eproto::offsets,
  file_level_metadata_payment_5fstate_2eproto, 2, file_level_enum_descriptors_payment_5fstate_2eproto, file_level_service_descriptors_payment_5fstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_payment_5fstate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_payment_5fstate_2eproto)), true);
namespace com {
namespace elarian {
namespace hera {
namespace proto {

// ===================================================================

PaymentState_WalletsEntry_DoNotUse::PaymentState_WalletsEntry_DoNotUse() {}
PaymentState_WalletsEntry_DoNotUse::PaymentState_WalletsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PaymentState_WalletsEntry_DoNotUse::MergeFrom(const PaymentState_WalletsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PaymentState_WalletsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PaymentState_WalletsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class PaymentState::_Internal {
 public:
};

void PaymentState::clear_customer_numbers() {
  customer_numbers_.Clear();
}
void PaymentState::clear_channel_numbers() {
  channel_numbers_.Clear();
}
void PaymentState::clear_transaction_log() {
  transaction_log_.Clear();
}
void PaymentState::clear_pending_transactions() {
  pending_transactions_.Clear();
}
void PaymentState::clear_wallets() {
  wallets_.Clear();
}
PaymentState::PaymentState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  customer_numbers_(arena),
  channel_numbers_(arena),
  transaction_log_(arena),
  pending_transactions_(arena),
  wallets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.PaymentState)
}
PaymentState::PaymentState(const PaymentState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      customer_numbers_(from.customer_numbers_),
      channel_numbers_(from.channel_numbers_),
      transaction_log_(from.transaction_log_),
      pending_transactions_(from.pending_transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wallets_.MergeFrom(from.wallets_);
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.PaymentState)
}

void PaymentState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentState_payment_5fstate_2eproto.base);
}

PaymentState::~PaymentState() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.PaymentState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PaymentState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PaymentState::ArenaDtor(void* object) {
  PaymentState* _this = reinterpret_cast< PaymentState* >(object);
  (void)_this;
}
void PaymentState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaymentState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentState& PaymentState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentState_payment_5fstate_2eproto.base);
  return *internal_default_instance();
}


void PaymentState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.PaymentState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customer_numbers_.Clear();
  channel_numbers_.Clear();
  transaction_log_.Clear();
  pending_transactions_.Clear();
  wallets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.elarian.hera.proto.CustomerNumber customer_numbers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_customer_numbers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.PaymentChannelNumber channel_numbers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_numbers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.PaymentTransaction transaction_log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transaction_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.PaymentTransaction pending_transactions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .com.elarian.hera.proto.PaymentBalance> wallets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&wallets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.PaymentState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.elarian.hera.proto.CustomerNumber customer_numbers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_customer_numbers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_customer_numbers(i), target, stream);
  }

  // repeated .com.elarian.hera.proto.PaymentChannelNumber channel_numbers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_numbers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_channel_numbers(i), target, stream);
  }

  // repeated .com.elarian.hera.proto.PaymentTransaction transaction_log = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transaction_log_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_transaction_log(i), target, stream);
  }

  // repeated .com.elarian.hera.proto.PaymentTransaction pending_transactions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pending_transactions(i), target, stream);
  }

  // map<string, .com.elarian.hera.proto.PaymentBalance> wallets = 5;
  if (!this->_internal_wallets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::PaymentBalance >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "com.elarian.hera.proto.PaymentState.WalletsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_wallets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_wallets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::PaymentBalance >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::PaymentBalance >::const_iterator
          it = this->_internal_wallets().begin();
          it != this->_internal_wallets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PaymentState_WalletsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::PaymentBalance >::const_iterator
          it = this->_internal_wallets().begin();
          it != this->_internal_wallets().end(); ++it) {
        target = PaymentState_WalletsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.PaymentState)
  return target;
}

size_t PaymentState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.PaymentState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.elarian.hera.proto.CustomerNumber customer_numbers = 1;
  total_size += 1UL * this->_internal_customer_numbers_size();
  for (const auto& msg : this->customer_numbers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.elarian.hera.proto.PaymentChannelNumber channel_numbers = 2;
  total_size += 1UL * this->_internal_channel_numbers_size();
  for (const auto& msg : this->channel_numbers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.elarian.hera.proto.PaymentTransaction transaction_log = 3;
  total_size += 1UL * this->_internal_transaction_log_size();
  for (const auto& msg : this->transaction_log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.elarian.hera.proto.PaymentTransaction pending_transactions = 4;
  total_size += 1UL * this->_internal_pending_transactions_size();
  for (const auto& msg : this->pending_transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .com.elarian.hera.proto.PaymentBalance> wallets = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_wallets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::PaymentBalance >::const_iterator
      it = this->_internal_wallets().begin();
      it != this->_internal_wallets().end(); ++it) {
    total_size += PaymentState_WalletsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.PaymentState)
  GOOGLE_DCHECK_NE(&from, this);
  const PaymentState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaymentState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.PaymentState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.PaymentState)
    MergeFrom(*source);
  }
}

void PaymentState::MergeFrom(const PaymentState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.PaymentState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  customer_numbers_.MergeFrom(from.customer_numbers_);
  channel_numbers_.MergeFrom(from.channel_numbers_);
  transaction_log_.MergeFrom(from.transaction_log_);
  pending_transactions_.MergeFrom(from.pending_transactions_);
  wallets_.MergeFrom(from.wallets_);
}

void PaymentState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.PaymentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentState::CopyFrom(const PaymentState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.PaymentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentState::IsInitialized() const {
  return true;
}

void PaymentState::InternalSwap(PaymentState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  customer_numbers_.InternalSwap(&other->customer_numbers_);
  channel_numbers_.InternalSwap(&other->channel_numbers_);
  transaction_log_.InternalSwap(&other->transaction_log_);
  pending_transactions_.InternalSwap(&other->pending_transactions_);
  wallets_.Swap(&other->wallets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace hera
}  // namespace elarian
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::PaymentState_WalletsEntry_DoNotUse* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::PaymentState_WalletsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::PaymentState_WalletsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::PaymentState* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::PaymentState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::PaymentState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
